swagger: '2.0'
info:
  description: This is the API documentation for the COP 4331 Contact Management App
  version: 1.0.0
  title: CamperNet
  contact:
    name: Jonathan Padron
    email: jo430544@ucf.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

host: campernet.xyz
basePath: /LAMPAPI
schemes:
  - http
paths:
  /Login.php:
    post:
      tags:
        - Users
      summary: Logs in to the Contact Management App
      operationId: doLogin
      description: Logs in using a username and password.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: loginItem
          description: Login details
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        200:
          description: Successful login
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              firstName:
                type: string
                example: "John"
              lastName:
                type: string
                example: "Doe"
              error:
                type: string
                example: ""
        400:
          description: Invalid login credentials
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No Records Found"
        500:
          description: Server Error

  /Register.php:
    post:
      tags:
        - Users
      summary: Registers a new user
      operationId: registerUser
      description: Creates a new user account.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: registerItem
          description: Registration details
          required: true
          schema:
            $ref: '#/definitions/Register'
      responses:
        200:
          description: Successful registration
          schema:
            type: object
            properties:
              result:
                type: string
                example: "Finished Successfully"
        400:
          description: User already exists
          schema:
            type: object
            properties:
              result:
                type: string
                example: "User Already Exists"
        500:
          description: Server Error

  /AddContact.php:
    post:
      tags:
        - Contacts
      summary: Adds a contact
      operationId: addContact
      description: Adds a new contact to the database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: contactItem
          description: Contact details
          required: true
          schema:
            $ref: '#/definitions/AddContact'
      responses:
        200:
          description: Contact added successfully
          schema:
            type: object
            properties:
              result:
                type: string
                example: "Contact Added Successfully"
        400:
          description: Invalid data input
          schema:
            type: object
            properties:
              result:
                type: string
                example: "Invalid contact data"
        500:
          description: Server Error

  /UpdateContact.php:
    post:
      tags:
        - Contacts
      summary: Updates a contact
      operationId: updateContact
      description: Updates an existing contact.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: contactItem
          description: Contact update details
          required: true
          schema:
            $ref: '#/definitions/UpdateContact'
      responses:
        200:
          description: Contact updated successfully
          schema:
            type: object
            properties:
              result:
                type: string
                example: "Contact Updated Successfully"
        400:
          description: Contact ID not found
          schema:
            type: object
            properties:
              result:
                type: string
                example: "No records updated. ID may not exist."
        500:
          description: Server Error

  /DeleteContact.php:
    post:
      tags:
        - Contacts
      summary: Deletes a contact
      operationId: deleteContact
      description: Deletes a contact from the database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: deleteItem
          description: Contact ID to delete
          required: true
          schema:
            $ref: '#/definitions/DeleteContact'
      responses:
        200:
          description: Contact deleted successfully
          schema:
            type: object
            properties:
              result:
                type: string
                example: "Contact Deleted Successfully"
        400:
          description: Contact ID not found
          schema:
            type: object
            properties:
              result:
                type: string
                example: "Contact ID does not exist."
        500:
          description: Server Error

  /SearchContact.php:
    post:
      tags:
        - Contacts
      summary: Searches contacts
      operationId: searchContact
      description: Searches for contacts in the database.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: searchItem
          description: Contact search query
          required: true
          schema:
            $ref: '#/definitions/SearchContact'
      responses:
        200:
          description: Contacts retrieved successfully
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  type: object
                  properties:
                    firstName:
                      type: string
                      example: "Jane"
                    lastName:
                      type: string
                      example: "Doe"
                    phone:
                      type: string
                      example: "555-123-4567"
                    email:
                      type: string
                      example: "janedoe@example.com"
        400:
          description: No contacts found
          schema:
            type: object
            properties:
              result:
                type: string
                example: "No Records Found"
        500:
          description: Server Error

definitions:
  Login:
    type: object
    required:
      - login
      - password
    properties:
      login:
        type: string
        example: "fred"
      password:
        type: string
        example: "secret"

  Register:
    type: object
    required:
      - firstName
      - lastName
      - username
      - password
    properties:
      firstName:
        type: string
        example: "John"
      lastName:
        type: string
        example: "Doe"
      username:
        type: string
        example: "johndoe"
      password:
        type: string
        example: "Password"

  AddContact:
    type: object
    required:
      - userId
      - firstName
      - lastName
      - phone
      - email
    properties:
      userId:
        type: integer
        example: 1
      firstName:
        type: string
        example: "Jane"
      lastName:
        type: string
        example: "Doe"
      phone:
        type: string
        example: "555-123-4567"
      email:
        type: string
        example: "janedoe@example.com"

  UpdateContact:
    type: object
    required:
      - ID
    properties:
      ID:
        type: integer
        example: 5

  DeleteContact:
    type: object
    required:
      - ID
    properties:
      ID:
        type: integer
        example: 5

  SearchContact:
    type: object
    required:
      - userId
      - search
    properties:
      userId:
        type: integer
        example: 1
      search:
        type: string
        example: "John"
